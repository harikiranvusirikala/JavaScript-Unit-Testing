Key benefits of unit testing:
- Catch bugs early in development 
- Boost confidence in your code 
- Write better, more maintainable JavaScript 

Topics:
===
• Introduction to Unit Testing
What unit testing is
What are its benefits
What are the common arguments
Unit testing in action
Learn how to write basic tests and run them

• Core Unit Testing Techniques and Best Practices
Concepts like positive and negative testing, boundary testing, parameterized testing and so on

• Breaking Dependencies with Mocks
Use of mocks or fakes to isolate our code during testing, an important technique used in unit testing

• Improve Code Quaility with Static Analysis Tools
Some handy static analysis toolsk like eslint, preitter and typescript
These tools help us elevate the quality of code and reduce the need for extensive test cases
===

Setting up the test environment:
Node.js - nodejs.org
Visual Studio Code - code.visualstuido.com

Benefits:
• Detect Bugs Early
• Facilitates Refactoring
• Improve Code Quaility
• Documenatation

Types of Testing:
• Unit Tests - individual component
• Integration Tests - group of component and their data flow
• End-to-end Tests - whole application

In general we need more Unit tests > Integration tests > E2E tests

Testing Framework - A set of tools for writing and running tests
It typically include
• Test Runner - for executing tests
• Assertion Libraries - to check if code behaves as expected
• Mocking Tools - to replace certain modules with fakes simulating different scenarios
• Coverage Tools - for measuring how much of the code is tested
and many other tools

Popular Frameworks:
• Jest - Experimental support for ECMAScript Modules
• Mocha
• Jasmine
* Vitest - Support ESM, TypeScript and JSX
• Cypress
• Playwright
and many more

Setting up Vitest:
$ npm i -D vitest	// DevDependcy not going to deployed with the application

Add "test": "vitest" in scripts section in package.json

$ npm t (or npm test)

describe to create group of test suites
test/it to create test case
except to verify the results

Test code content
Arrange - Setup our test environment including any necessary data or configuration
Act - Perform the action we want to test
Assert - Check the outcome to ensure that it matches our expectations

First test in tests/intro.test.js

Fore Error: Initiated Worker with invalid NODE_OPTIONS env variable: --openssl-legacy-provider is not allowed in NODE_OPTIONS
➜ echo $NODE_OPTIONS
--openssl-legacy-provider
➜ unset NODE_OPTIONS
