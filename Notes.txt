Key benefits of unit testing:
- Catch bugs early in development 
- Boost confidence in your code 
- Write better, more maintainable JavaScript 

Topics:
===
• Introduction to Unit Testing
What unit testing is
What are its benefits
What are the common arguments
Unit testing in action
Learn how to write basic tests and run them

• Core Unit Testing Techniques and Best Practices
Concepts like positive and negative testing, boundary testing, parameterized testing and so on

• Breaking Dependencies with Mocks
Use of mocks or fakes to isolate our code during testing, an important technique used in unit testing

• Improve Code Quaility with Static Analysis Tools
Some handy static analysis toolsk like eslint, preitter and typescript
These tools help us elevate the quality of code and reduce the need for extensive test cases
===

Setting up the test environment:
Node.js - nodejs.org
Visual Studio Code - code.visualstuido.com

Benefits:
• Detect Bugs Early
• Facilitates Refactoring
• Improve Code Quaility
• Documenatation

Types of Testing:
• Unit Tests - individual component
• Integration Tests - group of component and their data flow
• End-to-end Tests - whole application

In general we need more Unit tests > Integration tests > E2E tests

Testing Framework - A set of tools for writing and running tests
It typically include
• Test Runner - for executing tests
• Assertion Libraries - to check if code behaves as expected
• Mocking Tools - to replace certain modules with fakes simulating different scenarios
• Coverage Tools - for measuring how much of the code is tested
and many other tools

Popular Frameworks:
• Jest - Experimental support for ECMAScript Modules
• Mocha
• Jasmine
* Vitest - Support ESM, TypeScript and JSX
• Cypress
• Playwright
and many more

Setting up Vitest:
$ npm i -D vitest	// DevDependcy not going to deployed with the application

Add "test": "vitest" in scripts section in package.json

$ npm t (or npm test)

describe to create group of test suites
test/it to create test case
except to verify the results

Test code content
Arrange - Setup our test environment including any necessary data or configuration
Act - Perform the action we want to test
Assert - Check the outcome to ensure that it matches our expectations

First test in tests/intro.test.js

Fore Error: Initiated Worker with invalid NODE_OPTIONS env variable: --openssl-legacy-provider is not allowed in NODE_OPTIONS
➜ echo $NODE_OPTIONS
--openssl-legacy-provider
➜ unset NODE_OPTIONS

Ways to write tests:
• Code First - write code first, then write tests
• Test First - vice versa - known as Test-driven Development(TDD)

Test-driven Development(TDD):
• Start by writing a filing test.
• Write just enought code to make the test pass.
• Refactor if necessary.

code for test1
  return NaN;

code for test2
  if(numbers.length === 0) return NaN;
  return numbers[0];

code for test3
  if (numbers.length === 0) return NaN;
  const sum = numbers.reduce((sum, current) => sum + current, 0)
  return sum / numbers.length;

TDD prevents us from over-engineering solutions.

Test UI:
===
- https://vitest.dev/guide/ui.html
$ npm i -D @vitest/ui

Add in scripts section of package.json
    "test:ui": "vitest --ui",

$ npm run test:ui

http://localhost:51204/__vitest__/


Coverage:
===
- https://vitest.dev/guide/coverage#coverage-setup
Add in scripts section of package.json
    "coverage": "vitest run --coverage"

setting coverage.enabled=true will display the results in Vitest UI.
// vitest.config.ts
===
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    coverage: {
      enabled: true,
      reporter: ['text', 'json', 'html'],
    },
  },
})
===

$ npm run coverage

Prettier:
===
$ npm i -D prettier

"format": "prettier . --write"

.prettierrc.json
{
  "singleQuote": true
}

$ npm run format


ESLint:
===
Used to identify potential errors and stylistic issues in JavaScript code.

$ npm i -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser typescript

From ESLint v9.0.0, the default configuration file is now "eslint.config.js".
If you are using a ".eslintrc.* file", please follow the migration guide to update your configuration file to the new format:
- https://eslint.org/docs/latest/use/configure/migration-guide

Used following for above migration
$ npx @eslint/migrate-config .eslintrc.json

In scripts
"lint": "eslint . --fix"

$ npm run lint


lint-staged:
===
Run linters against staged git files and don't let 💩 slip into your code base!
Executes when we do git commit.

- https://www.npmjs.com/package/lint-staged

$ npm i -D lint-staged


husky:
===
Modern native git hooks made easy
Husky enhances your commits and more 🐶 woof!
Automatically lint your commit messages, code, and run tests upon committing or pushing.

- https://typicode.github.io/husky/get-started.html

$ npm i -D husky

$ npx husky init

Try
$ git commit -m "Keep calm and commit"
# test script will run every time you commit

